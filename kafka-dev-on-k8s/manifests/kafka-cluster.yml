apiVersion: v1
kind: Service
metadata:
  labels:
    app: zookeeper
  name: zookeeper
spec:
  ports:
    - port: 2181
      targetPort: 2181
  selector:
    app: zookeeper
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: zookeeper
  name: zookeeper
spec:
  replicas: 1
  selector:
    matchLabels:
      app: zookeeper
  template:
    metadata:
      labels:
        app: zookeeper
    spec:
      containers:
        - image: bitnami/zookeeper:3.5
          name: zookeeper-container
          ports:
            - containerPort: 2181
          env:
            - name: ALLOW_ANONYMOUS_LOGIN
              value: "yes"
          resources: {}
---
apiVersion: v1
kind: Service
metadata:
  name: kafka-ext
  labels:
    app: kafka
spec:
  type: LoadBalancer
  ports:
    - port: 29092
      name: external
  selector:
    app: kafka
---
apiVersion: v1
kind: Service
metadata:
  name: kafka
  labels:
    app: kafka
spec:
  ports:
    - port: 9092
      name: internal
  selector:
    app: kafka
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: kafka
  name: kafka
spec:
  replicas: 1
  selector:
    matchLabels:
      app: kafka
  template:
    metadata:
      labels:
        app: kafka
    spec:
      containers:
        - image: bitnami/kafka:2.8.1
          name: kafka-container
          ports:
            - containerPort: 2181
          env:
            - name: ALLOW_PLAINTEXT_LISTENER
              value: "yes"
            - name: KAFKA_CFG_ZOOKEEPER_CONNECT
              value: zookeeper:2181
            - name: POD_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
            - name: KAFKA_CFG_BROKER_ID
              valueFrom:
                fieldRef:
                  fieldPath: metadata.labels['apps.kubernetes.io/pod-index']
            - name: KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP
              value: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT
            - name: KAFKA_CFG_LISTENERS
              value: INTERNAL://:9092,EXTERNAL://:29092
            - name: KAFKA_CFG_ADVERTISED_LISTENERS
              value: INTERNAL://kafka:9092,EXTERNAL://kafka:29092
            - name: KAFKA_CFG_INTER_BROKER_LISTENER_NAME
              value: INTERNAL
            - name: KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE
              value: "true"
            - name: KAFKA_CFG_DELETE_TOPIC_ENABLE
              value: "true"
            - name: KAFKA_CFG_NUM_PARTITIONS
              value: "3"
            - name: KAFKA_CFG_DEFAULT_REPLICATION_FACTOR
              value: "1"
          resources: {}
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: kafka
spec:
  serviceName: kafka
  replicas: 2
  selector:
    matchLabels:
      app: kafka
  template:
    metadata:
      labels:
        app: kafka
    spec:
      containers:
        - image: bitnami/kafka:2.8.1
          name: kafka-container
          command:
            [
              "/opt/bitnami/kafka/bin/kafka-server-start.sh",
              "/shared/server.properties",
            ]
          env:
            - name: ALLOW_PLAINTEXT_LISTENER
              value: "yes"
          securityContext:
            runAsUser: 0
          ports:
            - containerPort: 9092
              name: internal
            - containerPort: 29092
              name: external
          volumeMounts:
            # - name: kafka-data
            #   mountPath: /bitnami/kafka
            - name: shared-volume
              mountPath: /shared
          resources: {}
      initContainers:
        - name: init-service
          image: busybox:1.28
          env:
            - name: POD_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
          command: ["sh", "-c"]
          args:
            - echo zookeeper.connect=zookeeper:2181 > /shared/server.properties;
              echo broker.id=$(echo $HOSTNAME | grep -Eo '[0-9]+' | tail -1) >> /shared/server.properties;
              echo listener.security.protocol.map=INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT >> /shared/server.properties;
              echo listeners=INTERNAL://:9092,EXTERNAL://:29092 >> /shared/server.properties;
              echo advertised.listeners=INTERNAL://:9092,EXTERNAL://$POD_IP:29092 >> /shared/server.properties;
              echo inter.broker.listener.name=INTERNAL >> /shared/server.properties;
              echo auto.create.topics.enable=true >> /shared/server.properties;
              echo delete.topic.enable=true >> /shared/server.properties;
              echo num.partitions=3 >> /shared/server.properties;
              echo default.replication.factor=2 >> /shared/server.properties;
          volumeMounts:
            - name: shared-volume
              mountPath: /shared
      volumes:
        - name: shared-volume
          emptyDir: {}
  # volumeClaimTemplates:
  #   - metadata:
  #       name: kafka-data
  #     spec:
  #       accessModes: ["ReadWriteOnce"]
  #       resources:
  #         requests:
  #           storage: 10Gi
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: kafka-ui
  name: kafka-ui
spec:
  ports:
    - port: 8080
      targetPort: 8080
  selector:
    app: kafka-ui
  type: LoadBalancer
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: kafka-ui
  name: kafka-ui
spec:
  replicas: 1
  selector:
    matchLabels:
      app: kafka-ui
  template:
    metadata:
      labels:
        app: kafka-ui
    spec:
      containers:
        - image: provectuslabs/kafka-ui:v0.7.1
          name: kafka-ui-container
          ports:
            - containerPort: 8080
          env:
            - name: KAFKA_CLUSTERS_0_NAME
              value: DEV
            - name: KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS
              value: kafka-0.kafka:9092
            - name: KAFKA_CLUSTERS_0_ZOOKEEPER
              value: zookeeper:2181
            - name: KAFKA_CLUSTERS_0_KAFKACONNECT_0_ADDRESS
              value: http://kafka-connect:8083
          resources: {}
